/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * gameabcd.java
 *
 * Created on Apr 30, 2016, 7:48:50 PM
 */

/**
 *
 * @author SUNIL
 */
import java.awt.Color;
import java.sql.*;
import javax.swing.JOptionPane;
import java.util.*;

public class gameabcd extends javax.swing.JFrame {

    /** Creates new form gameabcd */

    String [] [] colour = new String [4] [4];
    char[][]index=new char[4][4];
    char[][]index1=new char[4][4];
    long score ;

    int direction;

    boolean testCombine [] [] = new boolean[4][4];

    Timer delay1;
    Timer delay2;
    Timer delay3;



    public gameabcd() {
        initComponents();
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel11 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        upBtn = new javax.swing.JButton();
        rightBtn = new javax.swing.JButton();
        downBtn = new javax.swing.JButton();
        leftBtn = new javax.swing.JButton();
        startBtn = new javax.swing.JButton();
        BestLabel = new javax.swing.JLabel();
        scoreLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        undoBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel11.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 36)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(204, 0, 0));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 204, 0), new java.awt.Color(204, 153, 0)));

        jLabel14.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 36)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 0, 0));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 204, 0), new java.awt.Color(204, 153, 0)));

        jLabel13.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 36)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 0, 0));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 204, 0), new java.awt.Color(204, 153, 0)));

        jLabel12.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 36)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 0, 0));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 204, 0), new java.awt.Color(204, 153, 0)));

        jLabel21.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 36)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 0, 0));
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 204, 0), new java.awt.Color(204, 153, 0)));

        jLabel22.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 36)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 0, 0));
        jLabel22.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel22.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 204, 0), new java.awt.Color(204, 153, 0)));

        jLabel23.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 36)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(255, 0, 0));
        jLabel23.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel23.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 204, 0), new java.awt.Color(204, 153, 0)));

        jLabel24.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 36)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 0, 0));
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel24.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 204, 0), new java.awt.Color(204, 153, 0)));

        jLabel31.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 36)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(255, 0, 0));
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel31.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 204, 0), new java.awt.Color(204, 153, 0)));

        jLabel32.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 36)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(255, 0, 0));
        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel32.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 204, 0), new java.awt.Color(204, 153, 0)));

        jLabel33.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 36)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(255, 0, 0));
        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel33.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 204, 0), new java.awt.Color(204, 153, 0)));

        jLabel34.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 36)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(255, 0, 0));
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel34.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 204, 0), new java.awt.Color(204, 153, 0)));

        jLabel41.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 36)); // NOI18N
        jLabel41.setForeground(new java.awt.Color(255, 0, 0));
        jLabel41.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel41.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 204, 0), new java.awt.Color(204, 153, 0)));

        jLabel42.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 36)); // NOI18N
        jLabel42.setForeground(new java.awt.Color(255, 0, 0));
        jLabel42.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel42.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 204, 0), new java.awt.Color(204, 153, 0)));

        jLabel43.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 36)); // NOI18N
        jLabel43.setForeground(new java.awt.Color(255, 0, 0));
        jLabel43.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel43.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 204, 0), new java.awt.Color(204, 153, 0)));

        jLabel44.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 36)); // NOI18N
        jLabel44.setForeground(new java.awt.Color(255, 0, 0));
        jLabel44.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel44.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(255, 204, 0), new java.awt.Color(204, 153, 0)));

        upBtn.setText("^");
        upBtn.setBorder(null);
        upBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upBtnActionPerformed(evt);
            }
        });

        rightBtn.setText(">");
        rightBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightBtnActionPerformed(evt);
            }
        });

        downBtn.setText("v");
        downBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downBtnActionPerformed(evt);
            }
        });

        leftBtn.setText("<");
        leftBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftBtnActionPerformed(evt);
            }
        });

        startBtn.setText("Restart Game");
        startBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBtnActionPerformed(evt);
            }
        });

        BestLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        scoreLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setText("SCORE");

        jLabel2.setText("BEST");

        undoBtn.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        undoBtn.setText("Undo");
        undoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(startBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(leftBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(upBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(downBtn, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rightBtn)))
                .addGap(123, 123, 123))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(155, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(BestLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(61, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(undoBtn)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(48, 48, 48))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BestLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(undoBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(upBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rightBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(leftBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(downBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(startBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents



    private void upBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upBtnActionPerformed

        direction = 1;

        for(int i=0;i<=3;i++)
        {
            for(int j = 0;j<=3;j++)
            {
                testCombine[i][j]=true;
            }
        }   
   
   for(int i=0;i<=3;i++)
   {
       for(int j=0;j<=3;j++)
       {
           index1[i][j]=index[i][j];
       }

   }
   int key=0;
   for(int i=0;i<=3;i++)
   {
       for(int j=0;j<=3;j++)
       {
           if(index[i][j]!=' ')
           {
                key=1;
           }
       }

   }
   if(key==0)
       JOptionPane.showMessageDialog(this,"Please start the game first");

  
goUp();
valueAssign();
for(int i =0;i<=3;i++ )
{
        for(int j=0;j<=3;j++)
        {
            colourAllot(i,j,index [i][j]);
        }
    }
colourAssign();
delay();
    }//GEN-LAST:event_upBtnActionPerformed




    private void startBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBtnActionPerformed

    

    score=0;

    int a=(int)((Math.random()*4));
    int b=(int)((Math.random()*4));
    int c=(int)((Math.random()*4));
    int d=(int)((Math.random()*4));

    while(a==c&&b==d)
    {
    c=(int)((Math.random()*4));
    d=(int)((Math.random()*4));

    }
    
    for(int i=0;i<=3;i++)
    {
      for(int j=0;j<=3;j++)
      {
          index[i][j]=' ';
      }
    }

    index[a][b]='A';
    index[c][d]='A';

    valueAssign();

    try
   {
      /* Class.forName("java.sql.DriverManager");
       Connection con=(Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/project12","root","dumbo");
       Statement stmt =(Statement)con.createStatement();
       String query="Delete from Saved_Game;";
       stmt.executeUpdate(query);


    for(int l=0;l<16;l++)
    {
        int i=l/4;
        int j=l%4;
        String query1="Insert into Saved_Game values ('"+i+j+"','"+index[i][j]+"','"+index[i][j]+"');";
        stmt.executeUpdate(query1);
    }

        String query1="Insert into Saved_Game values ('sc','0','0');";
        stmt.executeUpdate(query1);
*/
    }
    catch(Exception e)
   {
       JOptionPane.showMessageDialog(this,e.getMessage());

   }

    for(int i =0;i<=3;i++ ) {
        for(int j=0;j<=3;j++) {
            colourAllot(i,j,index [i][j]);
        }
    }
    colourAssign();
// TODO add your handling code here:
    }//GEN-LAST:event_startBtnActionPerformed

    private void downBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downBtnActionPerformed
      direction = 2;

        for(int i=0;i<=3;i++)
        {
            for(int j = 0;j<=3;j++)
            {
                testCombine[i][j]=true;
            }
        }

   for(int i=0;i<=3;i++)
   {
       for(int j=0;j<=3;j++)
       {
           index1[i][j]=index[i][j];
       }

   }
   int key=0;
   for(int i=0;i<=3;i++)
   {
       for(int j=0;j<=3;j++)
       {
           if(index[i][j]!=' ')
           {
                key=1;
           }
       }

   }
   if(key==0)
       JOptionPane.showMessageDialog(this,"Please start the game first");


goDown();
valueAssign();
for(int i =0;i<=3;i++ )
{
        for(int j=0;j<=3;j++)
        {
            colourAllot(i,j,index [i][j]);
        }
    }
colourAssign();
delay();
// TODO add your handling code here:
    }//GEN-LAST:event_downBtnActionPerformed

    private void leftBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftBtnActionPerformed
direction = 3;

        for(int i=0;i<=3;i++)
        {
            for(int j = 0;j<=3;j++)
            {
                testCombine[i][j]=true;
            }
        }

   for(int i=0;i<=3;i++)
   {
       for(int j=0;j<=3;j++)
       {
           index1[i][j]=index[i][j];
       }

   }
   int key=0;
   for(int i=0;i<=3;i++)
   {
       for(int j=0;j<=3;j++)
       {
           if(index[i][j]!=' ')
           {
                key=1;
           }
       }

   }
   if(key==0)
       JOptionPane.showMessageDialog(this,"Please start the game first");


goLeft();
valueAssign();
for(int i =0;i<=3;i++ )
{
        for(int j=0;j<=3;j++)
        {
            colourAllot(i,j,index [i][j]);
        }
    }
colourAssign();
delay();

// TODO add your handling code here:
    }//GEN-LAST:event_leftBtnActionPerformed

    private void rightBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightBtnActionPerformed
        
direction = 4;

        for(int i=0;i<=3;i++)
        {
            for(int j = 0;j<=3;j++)
            {
                testCombine[i][j]=true;
            }
        }

   for(int i=0;i<=3;i++)
   {
       for(int j=0;j<=3;j++)
       {
           index1[i][j]=index[i][j];
       }

   }
   int key=0;
   for(int i=0;i<=3;i++)
   {
       for(int j=0;j<=3;j++)
       {
           if(index[i][j]!=' ')
           {
                key=1;
           }
       }

   }
   if(key==0)
       JOptionPane.showMessageDialog(this,"Please start the game first");


goRight();
valueAssign();
for(int i =0;i<=3;i++ )
{
        for(int j=0;j<=3;j++)
        {
            colourAllot(i,j,index [i][j]);
        }
    }
colourAssign();
delay();
 // TODO add your handling code here:
    }//GEN-LAST:event_rightBtnActionPerformed

    private void undoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoBtnActionPerformed

        
/*
    try
    {
         Class.forName("java.sql.DriverManager");
       Connection con=(Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/project12","root","dumbo");
       Statement stmt =(Statement)con.createStatement();

    for(int l=0;l<16;l++)
    {
        int i=l/4;
        int j=l%4;
        String query1="Update Saved_Game set  present = previous where jLabelNo = '"+i+j+"';";
        stmt.executeUpdate(query1);
    }

       String query1="Update Saved_Game set  present = previous where jLabelNo = 'sc';";
        stmt.executeUpdate(query1);

    for(int i=0;i<=3;i++)
   {
       for(int j=0;j<=3;j++)
       {
           String query="Select Present from Saved_Game where jLabelNo = '"+i+j+"';";
           ResultSet rs = stmt.executeQuery(query);
           if(rs.next())
           index[i][j]=(rs.getString("Present")).charAt(0);

       }

   }

           String query="Select Present from Saved_Game where jLabelNo = 'sc';";
           ResultSet rs = stmt.executeQuery(query);
           if(rs.next())
           score=Long.parseLong(rs.getString("Present"));

   valueAssign();
   for(int i =0;i<=3;i++ ) {
        for(int j=0;j<=3;j++) {
            colourAllot(i,j,index [i][j]);
        }
    }
    colourAssign();

    }
    catch(Exception e)
    {
       JOptionPane.showMessageDialog(this,e.getMessage());

    }

  */      // TODO add your handling code here:
    }//GEN-LAST:event_undoBtnActionPerformed

    /**
    * @param args the command line arguments
    */

    public void colourAllot(int a,int b,char c) {
        switch(c) {
        case 'A':   colour[a][b] = "0xFF0000"; break;
        case 'B':   colour[a][b] = "0x00FF00"; break;
        case 'C':   colour[a][b] = "0x0000FF"; break;
        default: colour[a] [b] = "0xFF0000"; break;

        }
    }

    public void colourAssign() {
        jLabel11.setForeground(Color.decode(colour[0][0]));
        jLabel12.setForeground(Color.decode(colour[0][1]));
        jLabel13.setForeground(Color.decode(colour[0][2]));
        jLabel14.setForeground(Color.decode(colour[0][3]));
        jLabel21.setForeground(Color.decode(colour[1][0]));
        jLabel22.setForeground(Color.decode(colour[1][1]));
        jLabel23.setForeground(Color.decode(colour[1][2]));
        jLabel24.setForeground(Color.decode(colour[1][3]));
        jLabel31.setForeground(Color.decode(colour[2][0]));
        jLabel32.setForeground(Color.decode(colour[2][1]));
        jLabel33.setForeground(Color.decode(colour[2][2]));
        jLabel34.setForeground(Color.decode(colour[2][3]));
        jLabel41.setForeground(Color.decode(colour[3][0]));
        jLabel42.setForeground(Color.decode(colour[3][1]));
        jLabel43.setForeground(Color.decode(colour[3][2]));
        jLabel44.setForeground(Color.decode(colour[3][3]));
    }

    public void valueAssign () {
    scoreLabel.setText(""+score);
    jLabel11.setText(""+index[0][0]);
    jLabel12.setText(""+index[0][1]);
    jLabel13.setText(""+index[0][2]);
    jLabel14.setText(""+index[0][3]);

    jLabel21.setText(""+index[1][0]);
    jLabel22.setText(""+index[1][1]);
    jLabel23.setText(""+index[1][2]);
    jLabel24.setText(""+index[1][3]);

    jLabel31.setText(""+index[2][0]);
    jLabel32.setText(""+index[2][1]);
    jLabel33.setText(""+index[2][2]);
    jLabel34.setText(""+index[2][3]);

    jLabel41.setText(""+index[3][0]);
    jLabel42.setText(""+index[3][1]);
    jLabel43.setText(""+index[3][2]);
    jLabel44.setText(""+index[3][3]);

    }

    public void goUp()
    {
        
        for(int j= 0; j<=3;j++)
        {
            if(index [0][j]==' ')
            {

               for(int l=0;l<3;l++)
               {
                   index[l][j]=index[l+1][j];
               }
               index[3][j]=' ';

            }
            else if(testCombine[0][j]&&testCombine[1][j]&&index [0][j]== index [1][j])
            {

               index[0][j]=(char)(index[1][j]+1);
               index[1][j]=(char)(index[2][j]);
               index[2][j]=(char)(index[3][j]);
               index[3][j]=' ';
               score+=(long)(Math.pow(2,index[0][j]-64));
               testCombine[0][j]=false;
            }
            else if (index[1][j]==' ')
            {

                for(int l=1;l<3;l++)
               {
                   index[l][j]=index[l+1][j];
               }
               index[3][j]=' ';
            }
            else if(testCombine[1][j]&&testCombine[2][j]&&index [1][j]== index [2][j])
            {

               index[1][j]=(char)(index[2][j]+1);
               index[2][j]=(char)(index[3][j]);
               index[3][j]=' ';
               score+=(long)(Math.pow(2,index[1][j]-64));
               testCombine[1][j]=false;
            }
            else if (index[2][j]==' ')
            {

                for(int l=2;l<3;l++)
               {
                   index[l][j]=index[l+1][j];
               }
               index[3][j]=' ';
            }
            else if(testCombine[2][j]&&testCombine[3][j]&&index [2][j]== index [3][j])
            {

               index[2][j]=(char)(index[3][j]+1);
               index[3][j]=' ';
               score+=(long)(Math.pow(2,index[2][j]-64));
               testCombine[2][j] = false;

            }
        }
    }

     public void goDown()
    {

        for(int j= 0; j<=3;j++)
        {
            if(index [3][j]==' ')
            {

               for(int l=3;l>0;l--)
               {
                   index[l][j]=index[l-1][j];
               }
               index[0][j]=' ';

            }
            else if(testCombine[3][j]&&testCombine[2][j]&&index [3][j]== index [2][j])
            {

               index[3][j]=(char)(index[2][j]+1);
               index[2][j]=(char)(index[1][j]);
               index[1][j]=(char)(index[0][j]);
               index[0][j]=' ';
               score+=(long)(Math.pow(2,index[3][j]-64));
               testCombine[3][j]=false;
            }
            else if (index[2][j]==' ')
            {

                for(int l=2;l>0;l--)
               {
                   index[l][j]=index[l-1][j];
               }
               index[0][j]=' ';
            }
            else if(testCombine[2][j]&&testCombine[1][j]&&index [2][j]== index [1][j])
            {

               index[2][j]=(char)(index[1][j]+1);
               index[1][j]=(char)(index[0][j]);
               index[0][j]=' ';
               score+=(long)(Math.pow(2,index[2][j]-64));
               testCombine[2][j]=false;
            }
            else if (index[1][j]==' ')
            {

                for(int l=1;l>0;l--)
               {
                   index[l][j]=index[l-1][j];
               }
               index[0][j]=' ';
            }
            else if(testCombine[1][j]&&testCombine[0][j]&&index [1][j]== index [0][j])
            {

               index[1][j]=(char)(index[0][j]+1);
               index[0][j]=' ';
               score+=(long)(Math.pow(2,index[1][j]-64));
               testCombine[1][j] = false;

            }
        }
    }
public void goLeft()
    {

        for(int i= 0; i<=3;i++)
        {
            if(index [i][0]==' ')
            {

               for(int l=0;l<3;l++)
               {
                   index[i][l]=index[i][l+1];
               }
               index[i][3]=' ';

            }
            else if(testCombine[i][0]&&testCombine[i][1]&&index [i][0]== index [i][1])
            {

               index[i][0]=(char)(index[i][1]+1);
               index[i][1]=(char)(index[i][2]);
               index[i][2]=(char)(index[i][3]);
               index[i][3]=' ';
               score+=(long)(Math.pow(2,index[i][0]-64));
               testCombine[i][0]=false;
            }
            else if (index[i][1]==' ')
            {

                for(int l=1;l<3;l++)
               {
                   index[i][l]=index[i][l+1];
               }
               index[i][3]=' ';
            }
            else if(testCombine[i][1]&&testCombine[i][2]&&index [i][1]== index [i][2])
            {

               index[i][1]=(char)(index[i][2]+1);
               index[i][2]=(char)(index[i][3]);
               index[i][3]=' ';
               score+=(long)(Math.pow(2,index[i][1]-64));
               testCombine[i][1]=false;
            }
            else if (index[i][2]==' ')
            {

                for(int l=2;l<3;l++)
               {
                   index[i][l]=index[i][l+1];
               }
               index[i][3]=' ';
            }
            else if(testCombine[i][2]&&testCombine[i][3]&&index [i][2]== index [i][3])
            {

               index[i][2]=(char)(index[i][3]+1);
               index[i][3]=' ';
               score+=(long)(Math.pow(2,index[i][2]-64));
               testCombine[i][2] = false;

            }
        }
    }
     public void goRight()
    {

        for(int i= 0; i<=3;i++)
        {
            if(index [i][3]==' ')
            {

               for(int l=3;l>0;l--)
               {
                   index[i][l]=index[i][l-1];
               }
               index[i][0]=' ';

            }
            else if(testCombine[i][3]&&testCombine[i][2]&&index [i][3]== index [i][2])
            {

               index[i][3]=(char)(index[i][2]+1);
               index[i][2]=(char)(index[i][1]);
               index[i][1]=(char)(index[i][0]);
               index[i][0]=' ';
               score+=(long)(Math.pow(2,index[i][3]-64));
               testCombine[i][3]=false;
            }
            else if (index[i][2]==' ')
            {

                for(int l=2;l>0;l--)
               {
                   index[i][l]=index[i][l-1];
               }
               index[i][0]=' ';
            }
            else if(testCombine[i][2]&&testCombine[i][1]&&index [i][2]== index [i][1])
            {

               index[i][2]=(char)(index[i][1]+1);
               index[i][1]=(char)(index[i][0]);
               index[i][0]=' ';
               score+=(long)(Math.pow(2,index[i][2]-64));
               testCombine[i][2]=false;
            }
            else if (index[i][1]==' ')
            {

                for(int l=1;l>0;l--)
               {
                   index[i][l]=index[i][l-1];
               }
               index[i][0]=' ';
            }
            else if(testCombine[i][1]&&testCombine[i][0]&&index [i][1]== index [i][0])
            {

               index[i][1]=(char)(index[i][0]+1);
               index[i][0]=' ';
               score+=(long)(Math.pow(2,index[i][1]-64));
               testCombine[i][1] = false;

            }
        }
    }

    public void delay() {
        delay1 = new Timer();
        delay2 = new Timer();
        delay3 = new Timer();
        delay1.schedule(new execute1(), 200);
        delay2.schedule(new execute1(),400);
        delay3.schedule(new execute2(),600);
    }

    class execute1 extends TimerTask {
        public void run() {
            switch(direction) {
                case 1: goUp();
                        valueAssign();
                        for(int i =0;i<=3;i++ )
                        {
                            for(int j=0;j<=3;j++)
                            {
                                colourAllot(i,j,index [i][j]);
                            }
                        }
                        colourAssign();
                        break;
                        case 2: goDown();
                        valueAssign();
                        for(int i =0;i<=3;i++ )
                        {
                            for(int j=0;j<=3;j++)
                            {
                                colourAllot(i,j,index [i][j]);
                            }
                        }
                        colourAssign();
                        break;
                        case 3: goLeft();
                        valueAssign();
                        for(int i =0;i<=3;i++ )
                        {
                            for(int j=0;j<=3;j++)
                            {
                                colourAllot(i,j,index [i][j]);
                            }
                        }
                        colourAssign();
                        break;
                        case 4: goRight();
                        valueAssign();
                        for(int i =0;i<=3;i++ )
                        {
                            for(int j=0;j<=3;j++)
                            {
                                colourAllot(i,j,index [i][j]);
                            }
                        }
                        colourAssign();
                        break;

            }

        }
    }
    class execute2 extends TimerTask {
        public void run() {
            try
{
   int flag=0;
   for(int i=0;i<=3;i++)
   {
       for(int j=0;j<=3;j++)
       {
           if(index1[i][j]!=index[i][j])
               flag = 1;
       }

   }

char add1=(char)(65+(int)((Math.random()*2)));
char add2=(char)(65+(int)((Math.random()*3)));
if(flag==1)
{
while(true)
{
    int a=(int)((Math.random()*4));
    int b=(int)((Math.random()*4));
    if(index[a][b]==' ')
    {
        if (score<150)
            index[a][b]='A';
        else if(score>=150&&score<500)
            index[a][b]=add1;
        else
            index[a][b]=add2;
        break;
    }
}

}

   valueAssign();
      for(int i =0;i<=3;i++ ) {
        for(int j=0;j<=3;j++) {
            colourAllot(i,j,index [i][j]);
        }
    }
   colourAssign();
    

   /*
       Class.forName("java.sql.DriverManager");
       Connection con=(Connection)DriverManager.getConnection("jdbc:mysql://localhost:3306/project12","root","dumbo");
       Statement stmt =(Statement)con.createStatement();
       

    if(flag==1)
    {
    for(int l=0;l<16;l++)
    {
        int i=l/4;
        int j=l%4;
        String query1="Update Saved_Game set previous = present where jLabelNo = '"+i+j+"';";
        stmt.executeUpdate(query1);
        String query="Update Saved_Game set present = '"+index[i][j]+"' where jLabelNo = '"+i+j+"';";
        stmt.executeUpdate(query);
    }
    }

        String query1="Update Saved_Game set previous = present where jLabelNo = 'sc';";
        stmt.executeUpdate(query1);
        String query="Update Saved_Game set present = '"+score+"' where jLabelNo = 'sc';";
        stmt.executeUpdate(query);
        
    */

    }
    catch(Exception e)
    {
       //JOptionPane.showMessageDialog(this, e.getMessage());

    }
        }
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gameabcd().setVisible(true);
            }
        });
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BestLabel;
    private javax.swing.JButton downBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JButton leftBtn;
    private javax.swing.JButton rightBtn;
    private javax.swing.JLabel scoreLabel;
    private javax.swing.JButton startBtn;
    private javax.swing.JButton undoBtn;
    private javax.swing.JButton upBtn;
    // End of variables declaration//GEN-END:variables

}
